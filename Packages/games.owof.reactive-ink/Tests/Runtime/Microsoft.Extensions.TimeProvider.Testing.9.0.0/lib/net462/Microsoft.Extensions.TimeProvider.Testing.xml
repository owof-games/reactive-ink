<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.TimeProvider.Testing</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that
                an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns<see
                    cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be
                null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
                The return value condition. If the method returns this value, the associated parameter may be<see
                    langword="null"/>.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns<see
                    cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not
                be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
                The return value condition. If the method returns this value, the associated parameter will not be<see
                    langword="null"/>.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
                The associated parameter name. The output will be non-null if the argument to the parameter specified is
                non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the
                specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
                The condition parameter value. Code after the method will be considered unreachable by diagnostics if
                the argument to
                the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have
                not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
                The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have
                not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property
                member.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value, the associated parameter will not be<see
                    langword="null"/>.
            </param>
            <param name="member">
                The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property
                members.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value, the associated parameter will not be<see
                    langword="null"/>.
            </param>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
            <summary>
                Indicates that certain members on a specified
                <see cref="T:System.Type"/>
                are accessed dynamically,
                for example through<see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
                This allows tools to understand which members are being accessed during the execution
                of a program.

                This attribute is valid on members whose type is
                <see cref="T:System.Type"/>
                or<see cref="T:System.String"/>.

                When this attribute is applied to a location of type<see cref="T:System.String"/>, the assumption is
                that the string represents a fully qualified type name.

                When this attribute is applied to a class, interface, or struct, the members specified
                can be accessed dynamically on
                <see cref="T:System.Type"/>
                instances returned from calling
                <see cref="M:System.Object.GetType"/>
                on instances of that class, interface, or struct.

                If the attribute is applied to a method it's treated as a special case and it implies
                the attribute should be applied to the "this" parameter of the method. As such the attribute
                should only be used on instance methods of types assignable to System.Type (or string, but no methods
                will use it there).
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/>
                class
                with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
                Gets the
                <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/>
                which specifies the type
                of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
            <summary>
                Specifies the types of members that are dynamically accessed.

                This enumeration has a
                <see cref="T:System.FlagsAttribute"/>
                attribute that allows a
                bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
                Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
                Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
                Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
                Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
                Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
                Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
                Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
                Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
                Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
                Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
                Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
                Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
                Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
                Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
                Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
                Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
                States a dependency that one member has on another.
            </summary>
            <remarks>
                This can be used to inform tooling of a dependency that is otherwise not evident purely from
                metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/>
                class
                with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/>
                class
                with the specified signature of a member on a<see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The
                <see cref="T:System.Type"/>
                containing<paramref name="memberSignature"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/>
                class
                with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/>
                class
                with the specified types of members on a<see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The
                <see cref="T:System.Type"/>
                containing the specified members.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/>
                class
                with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
                Gets the signature of the member depended on.
            </summary>
            <remarks>
                Either
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/>
                must be a valid string or
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
                must not equal<see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but
                not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
                Gets the
                <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/>
                which specifies the type
                of members depended on.
            </summary>
            <remarks>
                Either
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/>
                must be a valid string or
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
                must not equal<see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but
                not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
                Gets the
                <see cref="T:System.Type"/>
                containing the specified member.
            </summary>
            <remarks>
                If neither
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/>
                nor
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/>
                are specified,
                the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
                Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
                If neither
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/>
                nor
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/>
                are specified,
                the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
                Gets the assembly name of the specified type.
            </summary>
            <remarks>
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/>
                is only valid when
                <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/>
                is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
                Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute">
            <summary>
                /// Indicates that the specified member requires assembly files to be on disk.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute"/>
                class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute"/>
                class.
            </summary>
            <param name="message">
                A message that contains information about the need for assembly files to be on disk.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Message">
            <summary>
                Gets an optional message that contains information about the need for
                assembly files to be on disk.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Url">
            <summary>
                Gets or sets an optional URL that contains more information about the member,
                why it requires assembly files to be on disk, and what options a consumer has
                to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
                Indicates that the specified method requires the ability to generate new code at runtime,
                for example through<see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
                This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/>
                class
                with the specified message.
            </summary>
            <param name="message">
                A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
                Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
                Gets or sets an optional URL that contains more information about the method,
                why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
                /// Indicates that the specified method requires dynamic access to code that is not referenced
                statically, for example through<see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
                This allows tools to understand which methods are unsafe to call when removing unreferenced
                code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/>
                class
                with the specified message.
            </summary>
            <param name="message">
                A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
                Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
                Gets or sets an optional URL that contains more information about the method,
                why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
                /// Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
                single code artifact.
            </summary>
            <remarks>
                <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
                is different than
                <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/>
                in that it doesn't have a
                <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled
                assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
                class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
                Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
                The
                <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/>
                property describes the tool or tool analysis category
                for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
                Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
                Concatenated together, the
                <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/>
                and
                <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
                properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
                Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
                The Scope property is an optional argument that specifies the metadata scope for which
                the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
                Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
                The
                <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/>
                property is an optional argument identifying the analysis target
                of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
                Because it is fully qualified, it can be long, particularly for targets such as parameters.
                The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
                Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
                The
                <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/>
                property is an optional argument that specifies additional
                exclusion where the literal metadata target is not sufficiently precise. For example,
                the
                <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
                cannot be applied within a method,
                and it may be desirable to suppress a violation against a statement in the method that will
                give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
                Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
                Indicates that an API element is experimental and subject to change without notice.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/>
                class.
            </summary>
            <param name="diagnosticId">Human readable explanation for marking experimental API.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
                Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
                The diagnostic ID is shown in build output for warnings and errors.
                <para>This property represents the unique ID that can be used to suppress the warnings or errors, if
                    needed.
                </para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
                Gets or sets the URL for corresponding documentation.
                The API accepts a format string instead of an actual URL, creating a generic URL that includes the
                diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
                Tags parameter that should be filled with specific caller name.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/>
                class.
            </summary>
            <param name="parameterName">Function parameter to take the name from.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
                Gets name of the function parameter that name should be taken from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
                Used to indicate to the compiler that the
                <c>.locals init</c>
                flag should not be set in method headers.
            </summary>
            <remarks>
                This attribute is unsafe because it may reveal uninitialized memory to
                the application in certain instances (e.g., reading from uninitialized
                stackalloc'd memory). If applied to a method directly, the attribute
                applies to that method and all nested functions (lambdas, local
                functions) below it. If applied to a type or module, it applies to all
                methods nested inside. This attribute is intentionally not permitted on
                assemblies. Use at the module level instead to apply to multiple type
                declarations.
            </remarks>
        </member>
        <member name="T:Microsoft.Shared.DiagnosticIds.DiagnosticIds">
            <summary>
                Various diagnostic IDs reported by this repo.
            </summary>
            <remarks>
                When adding a new diagnostic ID, add a corresponding suppression to the root <c>
                Directory.Build.targets
            </c> file,
                and add a documentation entry to <c>docs/list-of-diagnostics.md</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.Shared.DiagnosticIds.DiagnosticIds.Experiments">
            <summary>
                Experiments supported by this repo.
            </summary>
        </member>
        <member name="T:Microsoft.Shared.Diagnostics.Throw">
            <summary>
                Defines static methods used to throw exceptions.
            </summary>
            <remarks>
                The main purpose is to reduce code size, improve performance, and standardize exception
                messages.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNull``1(``0,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentNullException"/>
                if the specified argument is<see langword="null"/>.
            </summary>
            <typeparam name="T">Argument type to be checked for<see langword="null"/>.
            </typeparam>
            <param name="argument">Object to be checked for<see langword="null"/>.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentNullException"/>
                if the specified argument is<see langword="null"/>,
                or
                <see cref="T:System.ArgumentException"/>
                if the specified member is<see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type to be checked for<see langword="null"/>.
            </typeparam>
            <typeparam name="TMember">Member type to be checked for<see langword="null"/>.
            </typeparam>
            <param name="argument">Argument to be checked for<see langword="null"/>.
            </param>
            <param name="member">Object member to be checked for<see langword="null"/>.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of<paramref name="member"/>.
            </returns>
            <example>
                <code language="csharp">
                    Throws.IfNullOrMemberNull(myObject, myObject?.MyProperty)
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentException"/>
                if the specified member is<see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type.</typeparam>
            <typeparam name="TMember">Member type to be checked for<see langword="null"/>.
            </typeparam>
            <param name="argument">Argument to which member belongs.</param>
            <param name="member">Object member to be checked for<see langword="null"/>.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of<paramref name="member"/>.
            </returns>
            <example>
                <code language="csharp">
                    Throws.IfMemberNull(myObject, myObject.MyProperty)
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrWhitespace(System.String,System.String)">
            <summary>
                Throws either an
                <see cref="T:System.ArgumentNullException"/>
                or an
                <see cref="T:System.ArgumentException"/>
                if the specified string is
                <see langword="null"/>
                or whitespace respectively.
            </summary>
            <param name="argument">String to be checked for
                <see langword="null"/>
                or whitespace.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrEmpty(System.String,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentNullException"/>
                if the string is<see langword="null"/>,
                or
                <see cref="T:System.ArgumentException"/>
                if it is empty.
            </summary>
            <param name="argument">String to be checked for
                <see langword="null"/>
                or empty.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfBufferTooSmall(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentException"/>
                if the argument's buffer size is less than the required buffer size.
            </summary>
            <param name="bufferSize">The actual buffer size.</param>
            <param name="requiredSize">The required buffer size.</param>
            <param name="paramName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange``1(``0,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the enum value is not valid.
            </summary>
            <param name="argument">The argument to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentNullException"/>
                if the collection is<see langword="null"/>,
                or
                <see cref="T:System.ArgumentException"/>
                if it is empty.
            </summary>
            <param name="argument">The collection to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of objects in the collection.</typeparam>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentNullException(System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentNullException(System.String,System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String,System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that caused this exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentException(System.String,System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentException(System.String,System.String,System.Exception)">
            <summary>
                Throws an<see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <remarks>
                If the
                <paramref name="innerException"/>
                is not a<see langword="null"/>, the current exception is raised in a catch
                block that handles the inner exception.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(System.String)">
            <summary>
                Throws an<see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(System.String,System.Exception)">
            <summary>
                Throws an<see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider">
            <summary>
                Represents a synthetic time provider that can be used to enable deterministic behavior in tests.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.#ctor">
            <summary>
                Initializes a new instance of the
                <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider"/>
                class.
            </summary>
            <remarks>
                This creates a provider whose time is initially set to midnight January 1st 2000.
                The provider is set to not automatically advance time each time it is read.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.#ctor(System.DateTimeOffset)">
            <summary>
                Initializes a new instance of the
                <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider"/>
                class.
            </summary>
            <param name="startDateTime">The initial time and date reported by the provider.</param>
            <remarks>
                The provider is set to not automatically advance time each time it is read.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.Start">
            <summary>
                Gets the starting date and time for this provider.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AutoAdvanceAmount">
            <summary>
                Gets or sets the amount of time by which time advances whenever the clock is read.
            </summary>
            <remarks>
                This defaults to<see cref="F:System.TimeSpan.Zero"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The time value is less than<see
                    cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetUtcNow">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.SetUtcNow(System.DateTimeOffset)">
            <summary>
                Advances the date and time in the UTC time zone.
            </summary>
            <param name="value">The date and time in the UTC time zone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The supplied time value is before the current time.
            </exception>
            <remarks>
                This method simply advances time. If the time is set forward beyond the
                trigger point of any outstanding timers, those timers will immediately trigger.
                This is unlike the
                <see cref="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AdjustTime(System.DateTimeOffset)"/>
                method, which has no impact
                on timers.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.Advance(System.TimeSpan)">
            <summary>
                Advances time by a specific amount.
            </summary>
            <param name="delta">The amount of time to advance the clock by.</param>
            <remarks>
                Advancing time affects the timers created from this provider, and all other operations that are directly
                or
                indirectly using this provider as a time source. Whereas when using<see
                    cref="P:System.TimeProvider.System"/>, time
                marches forward automatically in hardware, for the fake time provider the application is responsible for
                doing this explicitly by calling this method.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The time value is less than<see
                    cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AdjustTime(System.DateTimeOffset)">
            <summary>
                Advances the date and time in the UTC time zone.
            </summary>
            <param name="value">The date and time in the UTC time zone.</param>
            <remarks>
                This method updates the current time, and has no impact on outstanding
                timers. This is similar to what happens in a real system when the system's
                time is changed.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetTimestamp">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.LocalTimeZone">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.SetLocalTimeZone(System.TimeZoneInfo)">
            <summary>
                Sets the local time zone.
            </summary>
            <param name="localTimeZone">The local time zone.</param>
        </member>
        <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.TimestampFrequency">
            <summary>
                Gets the amount by which the value from
                <see cref="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetTimestamp"/>
                increments per second.
            </summary>
            <remarks>
                This is fixed to the value of<see cref="F:System.TimeSpan.TicksPerSecond"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.ToString">
            <summary>
                Returns a string representation this provider's idea of current time.
            </summary>
            <returns>A string representing the provider's current time.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.CreateTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
    </members>
</doc>
