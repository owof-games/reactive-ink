<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.TimeProvider.Testing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Shared.DiagnosticIds.DiagnosticIds">
            <summary>
                Various diagnostic IDs reported by this repo.
            </summary>
            <remarks>
                When adding a new diagnostic ID, add a corresponding suppression to the root <c>
                Directory.Build.targets
            </c> file,
                and add a documentation entry to <c>docs/list-of-diagnostics.md</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.Shared.DiagnosticIds.DiagnosticIds.Experiments">
            <summary>
                Experiments supported by this repo.
            </summary>
        </member>
        <member name="T:Microsoft.Shared.Diagnostics.Throw">
            <summary>
                Defines static methods used to throw exceptions.
            </summary>
            <remarks>
                The main purpose is to reduce code size, improve performance, and standardize exception
                messages.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNull``1(``0,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentNullException"/>
                if the specified argument is<see langword="null"/>.
            </summary>
            <typeparam name="T">Argument type to be checked for<see langword="null"/>.
            </typeparam>
            <param name="argument">Object to be checked for<see langword="null"/>.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentNullException"/>
                if the specified argument is<see langword="null"/>,
                or
                <see cref="T:System.ArgumentException"/>
                if the specified member is<see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type to be checked for<see langword="null"/>.
            </typeparam>
            <typeparam name="TMember">Member type to be checked for<see langword="null"/>.
            </typeparam>
            <param name="argument">Argument to be checked for<see langword="null"/>.
            </param>
            <param name="member">Object member to be checked for<see langword="null"/>.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of<paramref name="member"/>.
            </returns>
            <example>
                <code language="csharp">
                    Throws.IfNullOrMemberNull(myObject, myObject?.MyProperty)
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentException"/>
                if the specified member is<see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type.</typeparam>
            <typeparam name="TMember">Member type to be checked for<see langword="null"/>.
            </typeparam>
            <param name="argument">Argument to which member belongs.</param>
            <param name="member">Object member to be checked for<see langword="null"/>.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of<paramref name="member"/>.
            </returns>
            <example>
                <code language="csharp">
                    Throws.IfMemberNull(myObject, myObject.MyProperty)
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrWhitespace(System.String,System.String)">
            <summary>
                Throws either an
                <see cref="T:System.ArgumentNullException"/>
                or an
                <see cref="T:System.ArgumentException"/>
                if the specified string is
                <see langword="null"/>
                or whitespace respectively.
            </summary>
            <param name="argument">String to be checked for
                <see langword="null"/>
                or whitespace.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrEmpty(System.String,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentNullException"/>
                if the string is<see langword="null"/>,
                or
                <see cref="T:System.ArgumentException"/>
                if it is empty.
            </summary>
            <param name="argument">String to be checked for
                <see langword="null"/>
                or empty.
            </param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfBufferTooSmall(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentException"/>
                if the argument's buffer size is less than the required buffer size.
            </summary>
            <param name="bufferSize">The actual buffer size.</param>
            <param name="requiredSize">The required buffer size.</param>
            <param name="paramName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange``1(``0,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the enum value is not valid.
            </summary>
            <param name="argument">The argument to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentNullException"/>
                if the collection is<see langword="null"/>,
                or
                <see cref="T:System.ArgumentException"/>
                if it is empty.
            </summary>
            <param name="argument">The collection to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of objects in the collection.</typeparam>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentNullException(System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentNullException(System.String,System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String,System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that caused this exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentException(System.String,System.String)">
            <summary>
                Throws an<see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentException(System.String,System.String,System.Exception)">
            <summary>
                Throws an<see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <remarks>
                If the
                <paramref name="innerException"/>
                is not a<see langword="null"/>, the current exception is raised in a catch
                block that handles the inner exception.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(System.String)">
            <summary>
                Throws an<see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(System.String,System.Exception)">
            <summary>
                Throws an<see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Int32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.UInt32,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Int64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.UInt64,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Double,System.String)">
            <summary>
                Throws an
                <see cref="T:System.ArgumentOutOfRangeException"/>
                if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of<paramref name="argument"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider">
            <summary>
                Represents a synthetic time provider that can be used to enable deterministic behavior in tests.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.#ctor">
            <summary>
                Initializes a new instance of the
                <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider"/>
                class.
            </summary>
            <remarks>
                This creates a provider whose time is initially set to midnight January 1st 2000.
                The provider is set to not automatically advance time each time it is read.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.#ctor(System.DateTimeOffset)">
            <summary>
                Initializes a new instance of the
                <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider"/>
                class.
            </summary>
            <param name="startDateTime">The initial time and date reported by the provider.</param>
            <remarks>
                The provider is set to not automatically advance time each time it is read.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.Start">
            <summary>
                Gets the starting date and time for this provider.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AutoAdvanceAmount">
            <summary>
                Gets or sets the amount of time by which time advances whenever the clock is read.
            </summary>
            <remarks>
                This defaults to<see cref="F:System.TimeSpan.Zero"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The time value is less than<see
                    cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetUtcNow">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.SetUtcNow(System.DateTimeOffset)">
            <summary>
                Advances the date and time in the UTC time zone.
            </summary>
            <param name="value">The date and time in the UTC time zone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The supplied time value is before the current time.
            </exception>
            <remarks>
                This method simply advances time. If the time is set forward beyond the
                trigger point of any outstanding timers, those timers will immediately trigger.
                This is unlike the
                <see cref="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AdjustTime(System.DateTimeOffset)"/>
                method, which has no impact
                on timers.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.Advance(System.TimeSpan)">
            <summary>
                Advances time by a specific amount.
            </summary>
            <param name="delta">The amount of time to advance the clock by.</param>
            <remarks>
                Advancing time affects the timers created from this provider, and all other operations that are directly
                or
                indirectly using this provider as a time source. Whereas when using<see
                    cref="P:System.TimeProvider.System"/>, time
                marches forward automatically in hardware, for the fake time provider the application is responsible for
                doing this explicitly by calling this method.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The time value is less than<see
                    cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AdjustTime(System.DateTimeOffset)">
            <summary>
                Advances the date and time in the UTC time zone.
            </summary>
            <param name="value">The date and time in the UTC time zone.</param>
            <remarks>
                This method updates the current time, and has no impact on outstanding
                timers. This is similar to what happens in a real system when the system's
                time is changed.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetTimestamp">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.LocalTimeZone">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.SetLocalTimeZone(System.TimeZoneInfo)">
            <summary>
                Sets the local time zone.
            </summary>
            <param name="localTimeZone">The local time zone.</param>
        </member>
        <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.TimestampFrequency">
            <summary>
                Gets the amount by which the value from
                <see cref="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetTimestamp"/>
                increments per second.
            </summary>
            <remarks>
                This is fixed to the value of<see cref="F:System.TimeSpan.TicksPerSecond"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.ToString">
            <summary>
                Returns a string representation this provider's idea of current time.
            </summary>
            <returns>A string representing the provider's current time.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.CreateTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
    </members>
</doc>
